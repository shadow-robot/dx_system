<?xml version="1.0" encoding="utf-8"?>
<!--
 Copyright (C) 2024-2025 Shadow Robot Company Ltd - All Rights Reserved. Proprietary and Confidential.
 Unauthorized copying of the content in this file, via any medium is strictly prohibited.
-->
<launch>

  <arg name="debug" default="false"/>
  <arg name="debug_log_level" default="false"/>
  <arg name="verbose" default="true"/>
  <arg name="bootload_mode" default="false"/>
  <arg name="robot_state_pub_frequency" default="250"/>
  <arg name="joint_state_pub_frequency" default="125"/>
  <arg name="hand_type" default="0x02000105"/>
  <arg name="ethercat_port" default="$(optenv ETHERCAT_PORT enp1s0)"/>
  <arg name="urdf_file" default="$(find dx_robot)/description/robot/right_hand_and_UR10e.urdf.xacro"/>
  <arg name="log_user" default="user"/>
  <arg name="controller_output" default="log"/>
  <arg name="controller_start_delay" default="5"/>
  <arg name="state_controller_start_delay" default="2"/>
  <arg name="snapshot_group" default="snapshot_groups/robot_finger_states_group"/>

  <arg name="start_control" default="true"/>
  <arg name="control_mode" default="trajectory"/>
  <!-- allowed values are trajectory, actuator_pwm, actuator_effort, joint_effort, position -->
  <arg name="moveit" default="true"/>

  <arg name="gui" default="true"/>
  <arg name="sim" default="false"/>

  <!-- Distal cameras and video stream arguments -->
  <arg name="distals" default="[F0, F1, F2]"/>
  <arg name="start_distal_cameras" default="false"/>
  <arg name="view_distal_cameras" default="false"/>

  <arg name="side" default="right"/>
  <arg name="side_letter" value="$(eval side[0])"/>
  <arg name="arm" default="true"/>
  <arg name="hand" default="true"/>
  <arg name="arm_model" default="ur10e"/>

  <arg name="hand_robot_config" default="$(find dx_config)/robot/$(arg side)/$(arg hand_type).yaml" />
  <arg name="arm_robot_config" default="$(find dx_config)/robot/$(arg side)/ur_arm_robot_hw.yaml" />

  <arg if="$(eval arg('moveit') and arg('start_control') and arg('hand') and arg('arm'))" name="rviz_config_file" default="$(find dx_right_dexee_ur_moveit_config)/launch/moveit.rviz"/>
  <arg if="$(eval arg('moveit') and arg('start_control') and arg('hand') and not arg('arm'))" name="rviz_config_file" default="$(find dx_right_dexee_moveit_config)/launch/moveit.rviz"/>
  <arg unless="$(eval arg('moveit') and arg('start_control'))" name="rviz_config_file" default="$(find dx_robot)/config/dx_robot.rviz"/>

  <!-- Robot description related config-->
  <arg unless="$(arg arm)" name="robot_name" default="$(arg side)_dexee"/>
  <arg unless="$(arg arm)" name="initial_z" default="0.0"/>
  <arg name="initial_y" default="0.0"/>
  <arg name="initial_yaw" default="0.0"/>
  <arg if="$(arg arm)" name="robot_name" default="$(arg side)_$(arg arm_model)_dexee"/>
  <arg if="$(arg arm)" name="initial_z" default="0.1"/>

  <!-- Args for simulation -->
  <!-- Set to true if you want the robot to start in the "home" positions -->
  <arg name="start_home" default="true"/>
  <!-- home_angles must be input at the launch -->
  <arg name="home_angles" unless="$(eval side=='left')" value="-J ra_shoulder_pan_joint 0.0 -J ra_elbow_joint 2.0 -J ra_wrist_1_joint -1 -J ra_wrist_2_joint 1.5708 -J ra_shoulder_lift_joint -1.25 -J ra_wrist_3_joint -2 -J rh_F0_J1 -0.5 -J rh_F1_J1 -0.5 -J rh_F2_J1 -0.5"/>
  <arg name="home_angles" if="$(eval side=='left')" value="-J la_shoulder_pan_joint 0.0 -J la_elbow_joint -2.0 -J la_wrist_1_joint -2.1 -J la_wrist_2_joint -1.5708 -J la_shoulder_lift_joint -1.89 -J la_wrist_3_joint 2 -J lh_F0_J1 -0.5 -J lh_F1_J1 -0.5 -J lh_F2_J1 -0.5"/>
  <arg name="paused" value="$(arg start_home)"/>
  <arg if="$(arg start_home)" name="spawn_model_extra_args" value="-unpause $(arg home_angles)" />
  <arg unless="$(arg start_home)" name="spawn_model_extra_args" value="" />
  <arg name="world" default="$(find dx_moveit_config)/config/demo.world"/>
  <arg name="gazebo_gui" default="$(arg gui)"/>

  <!-- Load custom rosconsole config file to enable debug log level for desired components
       (e.g used to debug plugin loading issues) -->
  <env if="$(arg debug_log_level)" name="ROSCONSOLE_CONFIG_FILE"
       value="$(find dx_config)/debug/custom_rosconsole.conf"/>

  <group if="$(arg arm)">
    <!-- These parameters are loaded in two places:
       - Here in the root namespace because that's what the arm calibration infrastructure expects (robot_description
         gets loaded to the root and calibration happens outside of the namesapce). This will keep compaibility with the
         preexisting sr_ur_calibration_loader script
       - It also gets loaded in the arm namespace in ur_arm_driver-only.launch (to be used by the arm driver)-->
    <arg name="arm_robot_hw" default="$(find dx_config)/robot/$(arg side)/ur_arm_robot_hw.yaml" />
    <rosparam command="load" file="$(arg arm_robot_hw)"/>
  </group>


  <!-- Loading robot description-->
  <include file="$(find dx_launch)/launch/load_robot_description.launch.xml">
    <arg name="sim" value="$(arg sim)"/>
    <arg name="side" value="$(arg side)"/>
    <arg name="arm" value="$(arg arm)"/>
    <arg name="hand" value="$(arg hand)"/>
    <arg name="arm_model" value="$(arg arm_model)"/>
    <arg name="hand_type" value="$(arg hand_type)"/>
    <arg name="initial_z" value="$(arg initial_z)"/>
    <arg name="initial_y" value="$(arg initial_y)"/>
    <arg name="initial_yaw" value="$(arg initial_yaw)"/>
  </include>


  <!-- Simulated robot launch-->
  <group if="$(arg sim)">
    <param name="/use_sim_time" value="true"/>

    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="world_name" default="$(arg world)"/>
      <arg name="gui" default="$(arg gui)"/>
      <arg name="paused" value="$(arg paused)"/>
      <arg name="debug" value="$(arg debug)"/>
      <arg name="verbose" value="$(arg verbose)" />
    </include>

    <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model $(arg robot_name) $(arg spawn_model_extra_args)" respawn="false" output="screen"/>

    <group if="$(arg hand)" ns="$(arg side)_hand">
      <include file="$(find dx_launch)/launch/dexee_sim.launch.xml">
        <arg name="robot_state_pub_frequency" default="$(arg robot_state_pub_frequency)"/>
        <arg name="joint_state_pub_frequency" default="$(arg joint_state_pub_frequency)"/>
        <arg name="moveit" default="$(arg moveit)"/>
        <arg name="side" default="$(arg side)"/>
      </include>
    </group>

    <group if="$(arg arm)" ns="$(arg side)_arm">
      <include file="$(find ros_ethercat_model)/launch/joint_state_publisher.launch" >
        <arg name="publish_rate" value="$(arg joint_state_pub_frequency)"/>
      </include>

      <!-- Robot state publisher -->
      <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
        <param name="publish_frequency" type="double" value="$(arg robot_state_pub_frequency)"/>
        <param name="tf_prefix" type="string" value="" />
      </node>

      <rosparam file="$(find dx_config)/gazebo/$(arg side_letter)a_trajectory_controller.yaml" command="load"/>
      <node name="arm_trajectory_controller_spawner" pkg="controller_manager" type="spawner" output="screen" args="$(arg side_letter)a_trajectory_controller"/>
    </group>
  </group>

  <!-- Real robot launch-->
  <group unless="$(arg sim)">
    <group if="$(arg arm)" ns="$(arg side)_arm">
      <param name="/robot_namespaces/$(arg side)_arm" value="$(arg arm_model)"/>
      <include file="$(find dx_launch)/launch/ur_arm_real.launch.xml">
        <arg name="debug" value="$(arg debug)"/>
        <arg name="hand_type" value="$(arg hand_type)"/>
        <arg name="robot_config" value="$(arg arm_robot_config)"/>
        <arg name="log_user" value="$(arg log_user)"/>
        <arg name="controller_output" value="$(arg controller_output)"/>
        <arg name="controller_start_delay" value="$(arg controller_start_delay)"/>
        <arg name="state_controller_start_delay" value="$(arg state_controller_start_delay)"/>
        <arg name="start_control" value="$(arg start_control)"/>
        <arg name="control_mode" value="$(arg control_mode)"/>
        <arg name="arm_model" value="$(arg arm_model)"/>
        <arg name="side" value="$(arg side)"/>
      </include>
    </group>

    <group if="$(arg hand)" ns="$(arg side)_hand">
      <param name="/robot_namespaces/$(arg side)_hand" value="r3_standard"/>
      <include if="$(arg start_distal_cameras)" file="$(find usb_cam)/launch/all.launch">
        <arg name="viewer" value="$(arg view_distal_cameras)"/>
        <arg name="zero" value="$(eval 'F0' in arg('distals'))"/>
        <arg name="one" value="$(eval 'F1' in arg('distals'))"/>
        <arg name="two" value="$(eval 'F2' in arg('distals'))"/>
      </include>

      <include file="$(find dx_launch)/launch/dexee_real.launch.xml">
        <arg name="debug" value="$(arg debug)"/>
        <arg name="hand_type" value="$(arg hand_type)"/>
        <arg name="ethercat_port" value="$(arg ethercat_port)"/>
        <arg name="bootload_mode" value="$(arg bootload_mode)"/>
        <arg name="robot_config" value="$(arg hand_robot_config)"/>
        <arg name="log_user" value="$(arg log_user)"/>
        <arg name="controller_output" value="$(arg controller_output)"/>
        <arg name="controller_start_delay" value="$(arg controller_start_delay)"/>
        <arg name="state_controller_start_delay" value="$(arg state_controller_start_delay)"/>
        <arg name="start_control" value="$(arg start_control)"/>
        <arg name="control_mode" value="$(arg control_mode)"/>
      </include>

      <include file="$(find dx_robot)/launch/snapshot_recorder.launch.xml">
        <!-- Different snapshot groups can be defined from snapshot_recording_params.yaml-->
        <arg name="snapshot_group" value="$(arg snapshot_group)"/>
      </include>
    </group>

    <!-- diagnostic aggregator for being able to see the results in the robot_monitor -->
    <node pkg="diagnostic_aggregator" type="aggregator_node" name="diagnostic_aggregator" >
      <rosparam command="load" file="$(find dx_config)/diagnostic_analyzers/$(arg side)/$(arg hand_type).yaml"/>
      <param if="$(eval arg('hand') and arg('arm'))" name="analyzers/control_loop/num_items" value="2"/>
    </node>
  </group>


  <!-- Start move_group -->
  <node if="$(eval arg('hand') and arg('arm'))" name="conditional_delayed_rostool_move_group" pkg="sr_utilities_common" type="conditional_delayed_rostool.py" output="screen">
    <param name="package_name" value="dx_right_dexee_ur_moveit_config" />
    <param name="executable_name" value="move_group.launch" />
    <rosparam param="params_list">[^robot_description$]</rosparam>
    <param name="launch_args_list" value="moveit_controller_manager:=ros_control"/>
  </node>

  <node if="$(eval arg('hand') and not arg('arm'))" name="conditional_delayed_rostool_move_group" pkg="sr_utilities_common" type="conditional_delayed_rostool.py" output="screen">
    <param name="package_name" value="dx_right_dexee_moveit_config" />
    <param name="executable_name" value="move_group.launch" />
    <rosparam param="params_list">[^robot_description$]</rosparam>
    <param name="launch_args_list" value="moveit_controller_manager:=ros_control"/>
  </node>

  <!-- RViz -->
  <node if="$(arg gui)" name="$(anon rviz)" pkg="rviz" type="rviz" respawn="true"
    args="-d $(arg rviz_config_file)" output="screen">
    <rosparam command="load" file="$(find dx_right_dexee_ur_moveit_config)/config/kinematics.yaml"/>
  </node>

  <!-- Start a joint_state_publisher that will merge the namespaced joint_states topics and republish them to the
       root namespace. This is only necessary for moveit to work well. -->
  <node name="conditional_delayed_rostool_joint_state_publisher" pkg="sr_utilities_common" type="conditional_delayed_rostool.py" output="screen">
    <param name="package_name" value="joint_state_publisher" />
    <param name="executable_name" value="joint_state_publisher" />
    <rosparam param="params_list">[^robot_description$]</rosparam>
    <param name="launch_args_list" value="
    _rate:=$(arg joint_state_pub_frequency) _source_list:=[$(arg side)_hand/joint_states,$(arg side)_arm/joint_states]" />
  </node>

  <node pkg="sr_logging_common" name="check_log_size" type="check_log_size.py" output="screen" required="True"/>

</launch>
