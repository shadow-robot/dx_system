<?xml version="1.0" encoding="utf-8"?>
<!--
 Copyright (C) 2024-2025 Shadow Robot Company Ltd - All Rights Reserved. Proprietary and Confidential.
 Unauthorized copying of the content in this file, via any medium is strictly prohibited.
-->
<launch>
  <arg name="debug" default="false"/>
  <!-- Whether there is a hand. -->
  <arg name="hand" default="true"/>
  <arg name="hand_type" default="0x02000105"/>
  <arg name="mounting_plate" default="true"/>
  <arg name="mounting_plate_name" default="G-SHW063_Tool_change_plate" />
  <arg name="arm_model" default="ur10e"/>
  <arg name="log_user" default="user"/>
  <arg name="controller_output" default="log"/>
  <arg name="state_controller_start_delay" default="2"/>
  <arg name="robot_system_id" default="0"/>
  <arg name="arm_prefix" value="a$(arg robot_system_id)"/>
  <arg name="robot_state_pub_frequency" default="250"/>
  <arg name="joint_state_pub_frequency" default="125"/>
  <arg name="robot_config" default="$(find dx_config)/robot/robot_system_$(arg robot_system_id)/ur_arm_robot_hw.yaml" />
  <arg name="force_torque_sensor_hw" default="$(find dx_config)/controllers/config/ur/robot_system_$(arg robot_system_id)/force_torque_controller.yaml"/>


  <rosparam command="load" file="$(arg robot_config)"/>

  <arg name="arm_speed_scale" default="0.5"/>

  <!-- Set arm payload mass and center of gravity -->
  <group if="$(eval hand and arg('hand_type') == '0x02000105')">
    <!-- Get correct mass -->
    <arg name="hand_mass" value="4.16453837"/>
    <arg if="$(eval arg('mounting_plate') and arg('mounting_plate_name') == 'G-SHW063_Tool_change_plate')"
      name="arm_payload_mass" default="$(eval arg('hand_mass') + 0.35)"/>

    <!-- Get correct center of gravity -->
    <!-- hand CoG is [0.0, 0.0, 0.07] -->
    <arg if="$(eval arg('mounting_plate') and arg('mounting_plate_name') == 'G-SHW063_Tool_change_plate')"
      name="arm_payload_cog" default="[0.0, 0.0, 0.108]"/>

    <arg unless="$(arg mounting_plate)" name="arm_payload_mass" default="$(arg hand_mass)"/>
    <arg unless="$(arg mounting_plate)" name="arm_payload_cog" default="[0.0, 0.0, 0.07]"/>

    <!-- Set the payload mass and CoG for the arm -->
    <node pkg="rosservice" type="rosservice" name="set_$(arg arm_prefix)_payload"
      args="call --wait $(arg arm_prefix)_sr_ur_robot_hw/set_payload '{mass: $(arg arm_payload_mass), center_of_gravity: $(arg arm_payload_cog)}'"/>
  </group>
  <group unless="$(arg hand)">
    <arg name="arm_payload_mass" default="0.0"/>
    <arg name="arm_payload_cog" default="[0.0, 0.0, 0.0]"/>

    <!-- Set the payload mass and CoG for the arm -->
    <node pkg="rosservice" type="rosservice" name="set_$(arg arm_prefix)_payload"
      args="call --wait $(arg arm_prefix)_sr_ur_robot_hw/set_payload '{mass: $(arg arm_payload_mass), center_of_gravity: $(arg arm_payload_cog)}'"/>
  </group>

  <rosparam subst_value="True">
    robot_hardware:
      - $(arg arm_prefix)_sr_ur_robot_hw
  </rosparam>

 <!-- Set the parameters related to ur files -->
  <param name="$(arg arm_prefix)_sr_ur_robot_hw/input_recipe_file" type="string" value="$(find ur_robot_driver)/resources/rtde_input_recipe.txt"/>
  <param name="$(arg arm_prefix)_sr_ur_robot_hw/output_recipe_file" type="string" value="$(find ur_robot_driver)/resources/rtde_output_recipe.txt"/>
  <param name="$(arg arm_prefix)_sr_ur_robot_hw/script_file" type="string" value="$(find ur_client_library)/resources/external_control.urscript"/>

  <param name="$(arg arm_prefix)_sr_ur_robot_hw/speed_scale" type="double" value="$(arg arm_speed_scale)"/>

  <!-- This is necessary to copy the kinematic parameters into the proper namespace to avoid the driver complaining
  about a mismatch in the calibration parameters read from the arm. The parameters are originally loaded in the root
  namespace by sr_ur_arm_calibration-loader.py. We keep it like that because it needs to be compatible with the way it
  works with hand E. The calibration is also read outside of the robot namespaces, because that is where we build the
  full robot URDf in construct_robot_description. -->
  <node name="copy_arm_$(arg robot_system_id)_kinematics_parameter" pkg="dx_launch" type="copy_parameter" output="screen">
    <param name="from_ns" value="/$(arg arm_prefix)_sr_ur_robot_hw"/>
    <param name="to_ns" value="$(arg arm_prefix)_sr_ur_robot_hw"/>
    <param name="param_name" value="kinematics"/>
    <!-- Wait a bit until all the subparameters under kinematics have been loaded to the parameter server before 
    copying them -->
    <param name="seconds_to_wait" value="0.1"/>
  </node>

  <group if="$(eval 'e' in arg('arm_model'))">
    <rosparam command="load" file="$(arg force_torque_sensor_hw)"/>
    <node name="ft_sensor_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="force_torque_sensor_controller" />
  </group>

  <!-- Start the robot driver node -->
  <!-- Wait for /robot_description to be available before running ur_arm_driver node. This avoids a potential race
  conidtion where the arm driver attempts to read the kinematics/hash parameter before all the subparameters under
  kinematics have been loaded to the parameter server-->
  <arg if="$(arg debug)" name="launch_prefix" value="gdb -ex run -args"/>
  <arg unless="$(arg debug)" name="launch_prefix" value="ethercat_grant"/>

  <include file="$(find sr_utilities_common)/launch/conditional_delayed_roslaunch.launch">
    <arg name="package_name" value="ros_control_robot" />
    <arg name="executable_name" value="ros_control_robot" />
    <arg name="params_list" value="['/robot_description']" />
    <arg name="launch_args_list" default="__name:=ur_robot_driver"/>
    <arg name="launch_prefix" value="$(arg launch_prefix)" />
    <arg name="timeout" value="10.0" />
  </include>

  <!-- Robot state publisher (publishes to /tf in the root namespace) -->
  <node name="conditional_delayed_rostool_robot_state_publisher" pkg="sr_utilities_common" type="conditional_delayed_rostool.py" output="screen">
    <param name="package_name" value="robot_state_publisher" />
    <param name="executable_name" value="robot_state_publisher" />
    <rosparam param="params_list">[^robot_description$]</rosparam>
    <param name="launch_args_list" value="
    _publish_frequency:=$(arg robot_state_pub_frequency)" />
  </node>

  <!-- Loads joint state publisher (a ros_control controller plugin that publishes to joint_states in the current namespace) -->
  <node name="js_timed_launch" pkg="sr_utilities_common" type="timed_roslaunch.sh"
        args="$(arg state_controller_start_delay) ros_ethercat_model joint_state_publisher.launch publish_rate:=$(arg joint_state_pub_frequency)" />
</launch>
